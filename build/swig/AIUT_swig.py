# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AIUT_swig', [dirname(__file__)])
        except ImportError:
            import _AIUT_swig
            return _AIUT_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_AIUT_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _AIUT_swig = swig_import_helper()
    del swig_import_helper
else:
    import _AIUT_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _AIUT_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _AIUT_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _AIUT_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _AIUT_swig.high_res_timer_epoch()

_AIUT_swig.SYMBOL_TIMEOUT_COUNT_swigconstant(_AIUT_swig)
SYMBOL_TIMEOUT_COUNT = _AIUT_swig.SYMBOL_TIMEOUT_COUNT
class Lora_Decoder(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(spreading_factor, code_rate, low_data_rate, header):
        """
        make(int spreading_factor, int code_rate, bool low_data_rate, bool header) -> Lora_Decoder_sptr

        Return a shared_ptr to a new instance of AIUT::Lora_Decoder.

        To avoid accidental use of raw pointers, AIUT::Lora_Decoder's constructor is in a private implementation class. AIUT::Lora_Decoder::make is the public interface for creating new instances.

        Params: (spreading_factor, code_rate, low_data_rate, header)
        """
        return _AIUT_swig.Lora_Decoder_make(spreading_factor, code_rate, low_data_rate, header)

    make = staticmethod(make)
    __swig_destroy__ = _AIUT_swig.delete_Lora_Decoder
    __del__ = lambda self: None
Lora_Decoder_swigregister = _AIUT_swig.Lora_Decoder_swigregister
Lora_Decoder_swigregister(Lora_Decoder)

def Lora_Decoder_make(spreading_factor, code_rate, low_data_rate, header):
    """
    Lora_Decoder_make(int spreading_factor, int code_rate, bool low_data_rate, bool header) -> Lora_Decoder_sptr

    Return a shared_ptr to a new instance of AIUT::Lora_Decoder.

    To avoid accidental use of raw pointers, AIUT::Lora_Decoder's constructor is in a private implementation class. AIUT::Lora_Decoder::make is the public interface for creating new instances.

    Params: (spreading_factor, code_rate, low_data_rate, header)
    """
    return _AIUT_swig.Lora_Decoder_make(spreading_factor, code_rate, low_data_rate, header)

class Lora_Decoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::AIUT::Lora_Decoder)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::AIUT::Lora_Decoder)> self) -> Lora_Decoder_sptr
        __init__(boost::shared_ptr<(gr::AIUT::Lora_Decoder)> self, Lora_Decoder p) -> Lora_Decoder_sptr
        """
        this = _AIUT_swig.new_Lora_Decoder_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(Lora_Decoder_sptr self) -> Lora_Decoder"""
        return _AIUT_swig.Lora_Decoder_sptr___deref__(self)

    __swig_destroy__ = _AIUT_swig.delete_Lora_Decoder_sptr
    __del__ = lambda self: None

    def make(self, spreading_factor, code_rate, low_data_rate, header):
        """
        make(Lora_Decoder_sptr self, int spreading_factor, int code_rate, bool low_data_rate, bool header) -> Lora_Decoder_sptr

        Return a shared_ptr to a new instance of AIUT::Lora_Decoder.

        To avoid accidental use of raw pointers, AIUT::Lora_Decoder's constructor is in a private implementation class. AIUT::Lora_Decoder::make is the public interface for creating new instances.

        Params: (spreading_factor, code_rate, low_data_rate, header)
        """
        return _AIUT_swig.Lora_Decoder_sptr_make(self, spreading_factor, code_rate, low_data_rate, header)


    def history(self):
        """history(Lora_Decoder_sptr self) -> unsigned int"""
        return _AIUT_swig.Lora_Decoder_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(Lora_Decoder_sptr self, int which, int delay)
        declare_sample_delay(Lora_Decoder_sptr self, unsigned int delay)
        """
        return _AIUT_swig.Lora_Decoder_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(Lora_Decoder_sptr self, int which) -> unsigned int"""
        return _AIUT_swig.Lora_Decoder_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(Lora_Decoder_sptr self) -> int"""
        return _AIUT_swig.Lora_Decoder_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(Lora_Decoder_sptr self) -> double"""
        return _AIUT_swig.Lora_Decoder_sptr_relative_rate(self)


    def start(self):
        """start(Lora_Decoder_sptr self) -> bool"""
        return _AIUT_swig.Lora_Decoder_sptr_start(self)


    def stop(self):
        """stop(Lora_Decoder_sptr self) -> bool"""
        return _AIUT_swig.Lora_Decoder_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(Lora_Decoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _AIUT_swig.Lora_Decoder_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(Lora_Decoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _AIUT_swig.Lora_Decoder_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(Lora_Decoder_sptr self) -> int"""
        return _AIUT_swig.Lora_Decoder_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(Lora_Decoder_sptr self, int m)"""
        return _AIUT_swig.Lora_Decoder_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(Lora_Decoder_sptr self)"""
        return _AIUT_swig.Lora_Decoder_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(Lora_Decoder_sptr self) -> bool"""
        return _AIUT_swig.Lora_Decoder_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(Lora_Decoder_sptr self, int m)"""
        return _AIUT_swig.Lora_Decoder_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(Lora_Decoder_sptr self) -> int"""
        return _AIUT_swig.Lora_Decoder_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(Lora_Decoder_sptr self, int i) -> long"""
        return _AIUT_swig.Lora_Decoder_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(Lora_Decoder_sptr self, long max_output_buffer)
        set_max_output_buffer(Lora_Decoder_sptr self, int port, long max_output_buffer)
        """
        return _AIUT_swig.Lora_Decoder_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(Lora_Decoder_sptr self, int i) -> long"""
        return _AIUT_swig.Lora_Decoder_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(Lora_Decoder_sptr self, long min_output_buffer)
        set_min_output_buffer(Lora_Decoder_sptr self, int port, long min_output_buffer)
        """
        return _AIUT_swig.Lora_Decoder_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(Lora_Decoder_sptr self) -> float"""
        return _AIUT_swig.Lora_Decoder_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(Lora_Decoder_sptr self) -> float"""
        return _AIUT_swig.Lora_Decoder_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(Lora_Decoder_sptr self) -> float"""
        return _AIUT_swig.Lora_Decoder_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(Lora_Decoder_sptr self) -> float"""
        return _AIUT_swig.Lora_Decoder_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(Lora_Decoder_sptr self) -> float"""
        return _AIUT_swig.Lora_Decoder_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(Lora_Decoder_sptr self) -> float"""
        return _AIUT_swig.Lora_Decoder_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(Lora_Decoder_sptr self, int which) -> float
        pc_input_buffers_full(Lora_Decoder_sptr self) -> pmt_vector_float
        """
        return _AIUT_swig.Lora_Decoder_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(Lora_Decoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(Lora_Decoder_sptr self) -> pmt_vector_float
        """
        return _AIUT_swig.Lora_Decoder_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(Lora_Decoder_sptr self, int which) -> float
        pc_input_buffers_full_var(Lora_Decoder_sptr self) -> pmt_vector_float
        """
        return _AIUT_swig.Lora_Decoder_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(Lora_Decoder_sptr self, int which) -> float
        pc_output_buffers_full(Lora_Decoder_sptr self) -> pmt_vector_float
        """
        return _AIUT_swig.Lora_Decoder_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(Lora_Decoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(Lora_Decoder_sptr self) -> pmt_vector_float
        """
        return _AIUT_swig.Lora_Decoder_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(Lora_Decoder_sptr self, int which) -> float
        pc_output_buffers_full_var(Lora_Decoder_sptr self) -> pmt_vector_float
        """
        return _AIUT_swig.Lora_Decoder_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(Lora_Decoder_sptr self) -> float"""
        return _AIUT_swig.Lora_Decoder_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(Lora_Decoder_sptr self) -> float"""
        return _AIUT_swig.Lora_Decoder_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(Lora_Decoder_sptr self) -> float"""
        return _AIUT_swig.Lora_Decoder_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(Lora_Decoder_sptr self) -> float"""
        return _AIUT_swig.Lora_Decoder_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(Lora_Decoder_sptr self) -> float"""
        return _AIUT_swig.Lora_Decoder_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(Lora_Decoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _AIUT_swig.Lora_Decoder_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(Lora_Decoder_sptr self)"""
        return _AIUT_swig.Lora_Decoder_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(Lora_Decoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _AIUT_swig.Lora_Decoder_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(Lora_Decoder_sptr self) -> int"""
        return _AIUT_swig.Lora_Decoder_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(Lora_Decoder_sptr self) -> int"""
        return _AIUT_swig.Lora_Decoder_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(Lora_Decoder_sptr self, int priority) -> int"""
        return _AIUT_swig.Lora_Decoder_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(Lora_Decoder_sptr self) -> std::string"""
        return _AIUT_swig.Lora_Decoder_sptr_name(self)


    def symbol_name(self):
        """symbol_name(Lora_Decoder_sptr self) -> std::string"""
        return _AIUT_swig.Lora_Decoder_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(Lora_Decoder_sptr self) -> io_signature_sptr"""
        return _AIUT_swig.Lora_Decoder_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(Lora_Decoder_sptr self) -> io_signature_sptr"""
        return _AIUT_swig.Lora_Decoder_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(Lora_Decoder_sptr self) -> long"""
        return _AIUT_swig.Lora_Decoder_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(Lora_Decoder_sptr self) -> basic_block_sptr"""
        return _AIUT_swig.Lora_Decoder_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(Lora_Decoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _AIUT_swig.Lora_Decoder_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(Lora_Decoder_sptr self) -> std::string"""
        return _AIUT_swig.Lora_Decoder_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(Lora_Decoder_sptr self, std::string name)"""
        return _AIUT_swig.Lora_Decoder_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(Lora_Decoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _AIUT_swig.Lora_Decoder_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(Lora_Decoder_sptr self) -> swig_int_ptr"""
        return _AIUT_swig.Lora_Decoder_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(Lora_Decoder_sptr self) -> swig_int_ptr"""
        return _AIUT_swig.Lora_Decoder_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(Lora_Decoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _AIUT_swig.Lora_Decoder_sptr_message_subscribers(self, which_port)

Lora_Decoder_sptr_swigregister = _AIUT_swig.Lora_Decoder_sptr_swigregister
Lora_Decoder_sptr_swigregister(Lora_Decoder_sptr)


Lora_Decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
Lora_Decoder = Lora_Decoder.make;


_AIUT_swig.DEMODULATOR_HISTORY_DEPTH_swigconstant(_AIUT_swig)
DEMODULATOR_HISTORY_DEPTH = _AIUT_swig.DEMODULATOR_HISTORY_DEPTH

_AIUT_swig.REQUIRED_PREAMBLE_CHIRPS_swigconstant(_AIUT_swig)
REQUIRED_PREAMBLE_CHIRPS = _AIUT_swig.REQUIRED_PREAMBLE_CHIRPS

_AIUT_swig.REQUIRED_SFD_CHIRPS_swigconstant(_AIUT_swig)
REQUIRED_SFD_CHIRPS = _AIUT_swig.REQUIRED_SFD_CHIRPS

_AIUT_swig.LORA_SFD_TOLERANCE_swigconstant(_AIUT_swig)
LORA_SFD_TOLERANCE = _AIUT_swig.LORA_SFD_TOLERANCE

_AIUT_swig.LORA_PREAMBLE_TOLERANCE_swigconstant(_AIUT_swig)
LORA_PREAMBLE_TOLERANCE = _AIUT_swig.LORA_PREAMBLE_TOLERANCE

_AIUT_swig.DEMODULATOR_SYNC_RECOVERY_COUNT_swigconstant(_AIUT_swig)
DEMODULATOR_SYNC_RECOVERY_COUNT = _AIUT_swig.DEMODULATOR_SYNC_RECOVERY_COUNT

_AIUT_swig.S_RESET_swigconstant(_AIUT_swig)
S_RESET = _AIUT_swig.S_RESET

_AIUT_swig.S_PREFILL_swigconstant(_AIUT_swig)
S_PREFILL = _AIUT_swig.S_PREFILL

_AIUT_swig.S_DETECT_PREAMBLE_swigconstant(_AIUT_swig)
S_DETECT_PREAMBLE = _AIUT_swig.S_DETECT_PREAMBLE

_AIUT_swig.S_SFD_SYNC_swigconstant(_AIUT_swig)
S_SFD_SYNC = _AIUT_swig.S_SFD_SYNC

_AIUT_swig.S_READ_HEADER_swigconstant(_AIUT_swig)
S_READ_HEADER = _AIUT_swig.S_READ_HEADER

_AIUT_swig.S_READ_PAYLOAD_swigconstant(_AIUT_swig)
S_READ_PAYLOAD = _AIUT_swig.S_READ_PAYLOAD

_AIUT_swig.S_OUT_swigconstant(_AIUT_swig)
S_OUT = _AIUT_swig.S_OUT
class Lora_Demodulator(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(spreading_factor, low_data_rate, beta, fft_factor):
        """
        make(int spreading_factor, bool low_data_rate, float beta, int fft_factor) -> Lora_Demodulator_sptr

        Return a shared_ptr to a new instance of AIUT::Lora_Demodulator.

        To avoid accidental use of raw pointers, AIUT::Lora_Demodulator's constructor is in a private implementation class. AIUT::Lora_Demodulator::make is the public interface for creating new instances.

        Params: (spreading_factor, low_data_rate, beta, fft_factor)
        """
        return _AIUT_swig.Lora_Demodulator_make(spreading_factor, low_data_rate, beta, fft_factor)

    make = staticmethod(make)
    __swig_destroy__ = _AIUT_swig.delete_Lora_Demodulator
    __del__ = lambda self: None
Lora_Demodulator_swigregister = _AIUT_swig.Lora_Demodulator_swigregister
Lora_Demodulator_swigregister(Lora_Demodulator)

def Lora_Demodulator_make(spreading_factor, low_data_rate, beta, fft_factor):
    """
    Lora_Demodulator_make(int spreading_factor, bool low_data_rate, float beta, int fft_factor) -> Lora_Demodulator_sptr

    Return a shared_ptr to a new instance of AIUT::Lora_Demodulator.

    To avoid accidental use of raw pointers, AIUT::Lora_Demodulator's constructor is in a private implementation class. AIUT::Lora_Demodulator::make is the public interface for creating new instances.

    Params: (spreading_factor, low_data_rate, beta, fft_factor)
    """
    return _AIUT_swig.Lora_Demodulator_make(spreading_factor, low_data_rate, beta, fft_factor)

class Lora_Demodulator_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::AIUT::Lora_Demodulator)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::AIUT::Lora_Demodulator)> self) -> Lora_Demodulator_sptr
        __init__(boost::shared_ptr<(gr::AIUT::Lora_Demodulator)> self, Lora_Demodulator p) -> Lora_Demodulator_sptr
        """
        this = _AIUT_swig.new_Lora_Demodulator_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(Lora_Demodulator_sptr self) -> Lora_Demodulator"""
        return _AIUT_swig.Lora_Demodulator_sptr___deref__(self)

    __swig_destroy__ = _AIUT_swig.delete_Lora_Demodulator_sptr
    __del__ = lambda self: None

    def make(self, spreading_factor, low_data_rate, beta, fft_factor):
        """
        make(Lora_Demodulator_sptr self, int spreading_factor, bool low_data_rate, float beta, int fft_factor) -> Lora_Demodulator_sptr

        Return a shared_ptr to a new instance of AIUT::Lora_Demodulator.

        To avoid accidental use of raw pointers, AIUT::Lora_Demodulator's constructor is in a private implementation class. AIUT::Lora_Demodulator::make is the public interface for creating new instances.

        Params: (spreading_factor, low_data_rate, beta, fft_factor)
        """
        return _AIUT_swig.Lora_Demodulator_sptr_make(self, spreading_factor, low_data_rate, beta, fft_factor)


    def history(self):
        """history(Lora_Demodulator_sptr self) -> unsigned int"""
        return _AIUT_swig.Lora_Demodulator_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(Lora_Demodulator_sptr self, int which, int delay)
        declare_sample_delay(Lora_Demodulator_sptr self, unsigned int delay)
        """
        return _AIUT_swig.Lora_Demodulator_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(Lora_Demodulator_sptr self, int which) -> unsigned int"""
        return _AIUT_swig.Lora_Demodulator_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(Lora_Demodulator_sptr self) -> int"""
        return _AIUT_swig.Lora_Demodulator_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(Lora_Demodulator_sptr self) -> double"""
        return _AIUT_swig.Lora_Demodulator_sptr_relative_rate(self)


    def start(self):
        """start(Lora_Demodulator_sptr self) -> bool"""
        return _AIUT_swig.Lora_Demodulator_sptr_start(self)


    def stop(self):
        """stop(Lora_Demodulator_sptr self) -> bool"""
        return _AIUT_swig.Lora_Demodulator_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(Lora_Demodulator_sptr self, unsigned int which_input) -> uint64_t"""
        return _AIUT_swig.Lora_Demodulator_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(Lora_Demodulator_sptr self, unsigned int which_output) -> uint64_t"""
        return _AIUT_swig.Lora_Demodulator_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(Lora_Demodulator_sptr self) -> int"""
        return _AIUT_swig.Lora_Demodulator_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(Lora_Demodulator_sptr self, int m)"""
        return _AIUT_swig.Lora_Demodulator_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(Lora_Demodulator_sptr self)"""
        return _AIUT_swig.Lora_Demodulator_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(Lora_Demodulator_sptr self) -> bool"""
        return _AIUT_swig.Lora_Demodulator_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(Lora_Demodulator_sptr self, int m)"""
        return _AIUT_swig.Lora_Demodulator_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(Lora_Demodulator_sptr self) -> int"""
        return _AIUT_swig.Lora_Demodulator_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(Lora_Demodulator_sptr self, int i) -> long"""
        return _AIUT_swig.Lora_Demodulator_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(Lora_Demodulator_sptr self, long max_output_buffer)
        set_max_output_buffer(Lora_Demodulator_sptr self, int port, long max_output_buffer)
        """
        return _AIUT_swig.Lora_Demodulator_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(Lora_Demodulator_sptr self, int i) -> long"""
        return _AIUT_swig.Lora_Demodulator_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(Lora_Demodulator_sptr self, long min_output_buffer)
        set_min_output_buffer(Lora_Demodulator_sptr self, int port, long min_output_buffer)
        """
        return _AIUT_swig.Lora_Demodulator_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(Lora_Demodulator_sptr self) -> float"""
        return _AIUT_swig.Lora_Demodulator_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(Lora_Demodulator_sptr self) -> float"""
        return _AIUT_swig.Lora_Demodulator_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(Lora_Demodulator_sptr self) -> float"""
        return _AIUT_swig.Lora_Demodulator_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(Lora_Demodulator_sptr self) -> float"""
        return _AIUT_swig.Lora_Demodulator_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(Lora_Demodulator_sptr self) -> float"""
        return _AIUT_swig.Lora_Demodulator_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(Lora_Demodulator_sptr self) -> float"""
        return _AIUT_swig.Lora_Demodulator_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(Lora_Demodulator_sptr self, int which) -> float
        pc_input_buffers_full(Lora_Demodulator_sptr self) -> pmt_vector_float
        """
        return _AIUT_swig.Lora_Demodulator_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(Lora_Demodulator_sptr self, int which) -> float
        pc_input_buffers_full_avg(Lora_Demodulator_sptr self) -> pmt_vector_float
        """
        return _AIUT_swig.Lora_Demodulator_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(Lora_Demodulator_sptr self, int which) -> float
        pc_input_buffers_full_var(Lora_Demodulator_sptr self) -> pmt_vector_float
        """
        return _AIUT_swig.Lora_Demodulator_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(Lora_Demodulator_sptr self, int which) -> float
        pc_output_buffers_full(Lora_Demodulator_sptr self) -> pmt_vector_float
        """
        return _AIUT_swig.Lora_Demodulator_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(Lora_Demodulator_sptr self, int which) -> float
        pc_output_buffers_full_avg(Lora_Demodulator_sptr self) -> pmt_vector_float
        """
        return _AIUT_swig.Lora_Demodulator_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(Lora_Demodulator_sptr self, int which) -> float
        pc_output_buffers_full_var(Lora_Demodulator_sptr self) -> pmt_vector_float
        """
        return _AIUT_swig.Lora_Demodulator_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(Lora_Demodulator_sptr self) -> float"""
        return _AIUT_swig.Lora_Demodulator_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(Lora_Demodulator_sptr self) -> float"""
        return _AIUT_swig.Lora_Demodulator_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(Lora_Demodulator_sptr self) -> float"""
        return _AIUT_swig.Lora_Demodulator_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(Lora_Demodulator_sptr self) -> float"""
        return _AIUT_swig.Lora_Demodulator_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(Lora_Demodulator_sptr self) -> float"""
        return _AIUT_swig.Lora_Demodulator_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(Lora_Demodulator_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _AIUT_swig.Lora_Demodulator_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(Lora_Demodulator_sptr self)"""
        return _AIUT_swig.Lora_Demodulator_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(Lora_Demodulator_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _AIUT_swig.Lora_Demodulator_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(Lora_Demodulator_sptr self) -> int"""
        return _AIUT_swig.Lora_Demodulator_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(Lora_Demodulator_sptr self) -> int"""
        return _AIUT_swig.Lora_Demodulator_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(Lora_Demodulator_sptr self, int priority) -> int"""
        return _AIUT_swig.Lora_Demodulator_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(Lora_Demodulator_sptr self) -> std::string"""
        return _AIUT_swig.Lora_Demodulator_sptr_name(self)


    def symbol_name(self):
        """symbol_name(Lora_Demodulator_sptr self) -> std::string"""
        return _AIUT_swig.Lora_Demodulator_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(Lora_Demodulator_sptr self) -> io_signature_sptr"""
        return _AIUT_swig.Lora_Demodulator_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(Lora_Demodulator_sptr self) -> io_signature_sptr"""
        return _AIUT_swig.Lora_Demodulator_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(Lora_Demodulator_sptr self) -> long"""
        return _AIUT_swig.Lora_Demodulator_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(Lora_Demodulator_sptr self) -> basic_block_sptr"""
        return _AIUT_swig.Lora_Demodulator_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(Lora_Demodulator_sptr self, int ninputs, int noutputs) -> bool"""
        return _AIUT_swig.Lora_Demodulator_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(Lora_Demodulator_sptr self) -> std::string"""
        return _AIUT_swig.Lora_Demodulator_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(Lora_Demodulator_sptr self, std::string name)"""
        return _AIUT_swig.Lora_Demodulator_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(Lora_Demodulator_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _AIUT_swig.Lora_Demodulator_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(Lora_Demodulator_sptr self) -> swig_int_ptr"""
        return _AIUT_swig.Lora_Demodulator_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(Lora_Demodulator_sptr self) -> swig_int_ptr"""
        return _AIUT_swig.Lora_Demodulator_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(Lora_Demodulator_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _AIUT_swig.Lora_Demodulator_sptr_message_subscribers(self, which_port)

Lora_Demodulator_sptr_swigregister = _AIUT_swig.Lora_Demodulator_sptr_swigregister
Lora_Demodulator_sptr_swigregister(Lora_Demodulator_sptr)


Lora_Demodulator_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
Lora_Demodulator = Lora_Demodulator.make;



